# ---------------------------- External Imports ----------------------------

# Import APIRouter for creating groups of related API routes
from fastapi import APIRouter, Depends, HTTPException, status, Path

# Import Session for managing SQLAlchemy database interactions
from sqlalchemy.orm import Session

# Import asyncio to run asynchronous background tasks
import asyncio


# ---------------------------- Internal Imports ----------------------------

# Import the get_db function to provide database session dependency and session factory
from ..db.session import get_db ,SessionLocal 

# Import the Document SQLAlchemy model used to interact with the documents table
from ..models.document_model import Document

# Import the Question SQLAlchemy model used to interact with the questions table
from ..models.question_model import Question

# Import schema for creating and returning document data
from ..schemas.document_schema import DocumentCreate, DocumentResponse

# Import schema for creating and returning question data
from ..schemas.question_schema import QuestionCreateTextOnly, QuestionResponse

# Import the LLM simulation service to process questions asynchronously
from ..services.llm_simulation import simulate_llm_answer

# Import the logging utility
from ..logging.logging_config import get_logger
logger = get_logger(__name__)  # Module-specific logger


# ---------------------------- Router Setup ----------------------------

# Create a FastAPI APIRouter instance with a prefix and tag for grouping document-related routes
router = APIRouter(prefix="/documents", tags=["Documents"])


# ---------------------------- Route: Create Document ----------------------------

# Define a POST endpoint to create a new document
@router.post("/", response_model=DocumentResponse, status_code=status.HTTP_201_CREATED)
async def create_document(doc: DocumentCreate, db: Session = Depends(get_db)):
    # Instantiate a new Document model using data from the request body
    new_doc = Document(title=doc.title, content=doc.content)

    # Add the new document to the current DB session
    db.add(new_doc)

    # Commit the session to persist the new document in the database
    db.commit()

    # Refresh the document instance to populate its ID and other autogenerated fields
    db.refresh(new_doc)

    # Log successful document creation
    logger.info(f"Document created with ID {new_doc.id}")

    # Return the newly created document as the response
    return new_doc


# ---------------------------- Route: Get Document by ID ----------------------------

# Define a GET endpoint to retrieve a document by its ID
@router.get("/{document_id}", response_model=DocumentResponse)
async def get_document(document_id: int, db: Session = Depends(get_db)):
    # Query the database for the document with the given ID
    document = db.query(Document).filter(Document.id == document_id).first()

    # If the document is not found, log error and raise a 404 Not Found error
    if not document:
        logger.error(f"Document with ID {document_id} not found")
        raise HTTPException(status_code=404, detail="Document not found")

    # Log document retrieval
    logger.info(f"Document retrieved with ID {document_id}")

    # Return the found document as the response
    return document


# ---------------------------- Route: Ask Question for Document ----------------------------

# Define a POST endpoint to ask a question about a specific document
@router.post("/{document_id}/question", response_model=QuestionResponse, status_code=status.HTTP_201_CREATED)
async def ask_question_for_document(
    # Path parameter to identify the target document
    document_id: int = Path(...),
    # Request body containing the question text
    q: QuestionCreateTextOnly = ...,
    # Injected database session
    db: Session = Depends(get_db)
):
    # Query the database to ensure the document exists
    document = db.query(Document).filter(Document.id == document_id).first()

    # If the document is not found, log error and raise a 404 Not Found error
    if not document:
        logger.error(f"Document with ID {document_id} not found while asking question")
        raise HTTPException(status_code=404, detail="Document not found")

    # Create a new Question instance with "pending" status
    question = Question(
        document_id=document_id,
        question=q.question,
        status="pending"
    )

    # Add the question to the DB session
    db.add(question)

    # Commit the session to save the question
    db.commit()

    # Refresh the question instance to access its ID
    db.refresh(question)

    # Start an asynchronous background task to simulate answering the question
    asyncio.create_task(simulate_llm_answer(question.id, db_session_factory=SessionLocal))

    # Log successful question creation
    logger.info(f"Question submitted with ID {question.id} for document ID {document_id}")

    # Return the question object immediately; the answer will be processed in the background
    return question
